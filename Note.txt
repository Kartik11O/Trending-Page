Design Part 2
   /* background: linear-gradient(
        45deg,
        #f09433 0%,
        #e6683c 25%,    
        #dc2743 50%,
        #cc2366 75%,
        #4862c9 100% 
        ); */

            const colorCodes = ['#ff0000', '#00ff00', '#0000ff', '#ffff00', '#ff00ff', '#00ffff'];

     
    // Function to generate a random index within a range
function getRandomIndex(max) {
  return Math.floor(Math.random() * max);
}

// Get all the elements you want to assign colors to
// const elements = document.querySelectorAll('.Gen'); // Replace '.color-elements' with your actual selector
const elements = document.querySelectorAll('.Gen'); // Replace '.color-elements' with your actual selector

// Assign a random color code from the 'colorCodes' array to each element
elements.forEach((element) => {
  const randomIndex = getRandomIndex(colorCodes.length);
  const randomColor = colorCodes[randomIndex];
  element.style.background = randomColor;
});




        let Pic_Container = ` 
        <div class="Holder card" data-aos="zoom-in">
        <div class="card__content">
        <p class="card__title">${Name_AnimeE || Name_Anime}</p>
        <p class="card__description">${des}</p>
        <p class="card__Status extra1 ALL"><b>Status:</b> ${status} , ${season} ${Year}</p>
        <p class="card__Gen extra2 ALL"><b>Genre:</b> ${gen[1] || gen[0] || gen[2] || gen[3]}, ${gen[0]}, ${gen[2]} </p>
        <p class="card__Popularity extra3 ALL"><b>Popularity:</b> ${avg} &#128516 </p>
  
      </div>
      <div class="IMGholder" style="background-image: url(${Poster_Anime});">
      </div>
  
      <div id="Anime-Name-Wapper">
      <h2 class="Anime-Headline">${Name_AnimeE || Name_Anime}</h2>
    </div>
       
  
      </div>
      
         `
        document.getElementById("Row-3").innerHTML += Pic_Container






        // function addSkeleton() {
//   // Add the 'Skeleton' class to the newly created elements
//   const newSkeletonElements = document.querySelectorAll(`.IMG_2:nth-child(n + ${itemCount + 1}), .Anime-Name-Wapper:nth-child(n + ${itemCount + 1})`);
//   console.log(newSkeletonElements , "Thissssssss")
//   newSkeletonElements.forEach((element) => {
//     element.classList.add("Skeleton");
//   });

//   // Update the itemCount for the next iteration
//   itemCount += newSkeletonElements.length;
// }

  // addSkeleton() // Adding the Skeleton Loading To Element